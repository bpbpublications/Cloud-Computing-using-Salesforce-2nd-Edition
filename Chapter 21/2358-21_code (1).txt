1.<!--  ----------------------------------------------------------------------  --><!--  NOTE: Please add the following <META> element to your page <HEAD>.      --><!--  If necessary, please modify the charset parameter to specify the        --><!--  character set of your HTML page.                                        --><!--  ----------------------------------------------------------------------  --><META HTTP-EQUIV="Content-type" CONTENT="text/html; charset=UTF-8"><!--  ----------------------------------------------------------------------  --><!--  NOTE: Please add the following <FORM> element to your page.             --><!--  ----------------------------------------------------------------------  --><form action="https://webto.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8" method="POST"><input type=hidden name="oid" value="00D6F000001OsOC"><input type=hidden name="retURL" value="https://coderinme.com"><!--  ----------------------------------------------------------------------  --><!--  NOTE: These fields are optional debugging elements. Please uncomment    --><!--  these lines if you wish to test in debug mode.                          --><!--  <input type="hidden" name="debug" value=1>                              --><!--  <input type="hidden" name="debugEmail" value="saifi@coderinme.com">     --><!--  ----------------------------------------------------------------------  --><label for="first_name">First Name</label><input  id="first_name" maxlength="40" name="first_name" size="20" type="text" /><br><label for="last_name">Last Name</label><input  id="last_name" maxlength="80" name="last_name" size="20" type="text" /><br><label for="email">Email</label><input  id="email" maxlength="80" name="email" size="20" type="text" /><br><label for="company">Company</label><input  id="company" maxlength="40" name="company" size="20" type="text" /><br><label for="city">City</label><input  id="city" maxlength="40" name="city" size="20" type="text" /><br><label for="state">State/Province</label><input  id="state" maxlength="20" name="state" size="20" type="text" /><br>SFId:<input  id="00N6F00000HqnP2" maxlength="20" name="00N6F00000HqnP2" size="20" type="text" /><br><input type="submit" name="submit"></form>2.global class myHandler implements Messaging.InboundEmailHandler {	  global Messaging.InboundEmailResult handleInboundEmail(Messaging.InboundEmail email, Messaging.InboundEnvelope envelope) {		  Messaging.InboundEmailResult result = new Messaging.InboundEmailresult();          return result;      }  }3.global class batchFormatClass implements Database.Batchable{   global Database.QueryLocator start(Database.BatchableContext BC){    string query='';    return Database.getQueryLocator(query);   }   global void execute(Database.BatchableContext BC, List<sObject> scope){     for(sobject s : scope){    // operation or process      }     update scope;    }   global void finish(Database.BatchableContext BC){   }}global class batchAccountUpdate implements Database.Batchable<sObject> {     //start    global Database.QueryLocator start(Database.BatchableContext BC){       // query from an object for records 	String query='SELECT Id, Name FROM Account';	return Database.QueryLocator(query);    }    //execute    global void execute(Database.BatchableContext BC,List<Account > Scope){        // here we will write logic for that what we want to do	integer i=1;        for(Account a: Scope){           a.name=a.name+i;           i++;        }        update ac;        system.debug('mine'+ac);    }    //finish    global void finish(Database.BatchableContext BC){       /* after the completion of batch anything we want to do like a confirmation of               batch execution/*                 }}//schedulerglobal class scheduledBatchable implements Schedulable {   global void execute(SchedulableContext sc) {      // batch class name do you want to call      batchAccountUpdate b = new batchAccountUpdate();       // size of batch how much record in single batch      database.executebatch(b,200);   }}batchAccountUpdate b = new batchAccountUpdate();       // size of batch how much record in single batchdatabase.executebatch(b,200);4.Http ht = new Http();HttpRequest  req = new HttpRequest ();String key =''; // you can get the google api key from google services String url ='https://maps.googleapis.com/maps/api/geocode/json?key='+key+'&latlng=28.5810215,77.3152004&sensor=true';req.setEndpoint(url);req.setMethod('GRT');//req.setBody('body');HttpResponse res = ht.send(req);if(res.getStatusCode()==200){            string str= res.getBody().split('"formatted_address" : "')[1].split('",')[0];            system.debug(str);}5.trigger updateMap on Contact (after insert, after update) {    for(Contact c: Trigger.new){        if(trigger.isUpdate){   // for update if location change we will call apiMap Class            if(c.Latitude__c != Trigger.oldMap.get(c.id).Latitude__c || c.Longitude__c != Trigger.oldMap.get(c.id).Longitude__c)       		apiMap.chckMap(String.valueOf(c.Latitude__c), string.valueOf(c.Longitude__c), c.id);        }        if(trigger.isInsert)            apiMap.chckMap(String.valueOf(c.Latitude__c), string.valueOf(c.Longitude__c), c.id);        // we are passing three args longitude, latitude and contact Id.    }}public class apiMap {/* if we are using api call we will use future callout then trigger will support API Callout * /    @future (callout=true)    public static void chckMap(string lat, string lon, string conId){// we will use these lat and lon on api url        Http h = new Http();        //28.5810215,77.3152004        HttpRequest  req = new HttpRequest ();        String url ='https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyDCJfSJhXuKJlffbFfB57yOO_iQK4kAmio&latlng='+lat+','+lon+'&sensor=true';        req.setEndpoint(url);        req.setMethod('GET');        HttpResponse res = h.send(req);        if(res.getStatusCode()==200){            string str= res.getBody().split('"formatted_address" : "')[1].split('",')[0];            system.debug(str);// update contact with address from API response            contact c= new Contact();            c.id=conId;            c.address__c=str;            update c;         }// making a log for every API Hit for best practice            httpRequest__c log1= new httpRequest__c();            log1.Request__c='MapAPI';            log1.response__c=str;            log1.status__c=String.valueOf(res.getStatusCode());            insert log1;    }6.RestRequest req = RestContext.request;RestResponse res = RestContext.response;ApplicantDetails appDetails = (ApplicantDetails)JSON.deserialize(req.requestBody.toString(),ApplicantDetails.class);  public class ApplicantDetails {        public String Session_Key;        public String Method_Type;        public String Application_Id;        public String Applicant_Id;} //Code to callIf we want to send the request to any other software, then our code will be like this:7.htttp hreq = new Http();HttpRequest req = new HttpRequest();//req.setHeader('userid','mukeshlms');req.setHeader('Content-type', 'application/json');req.setEndpoint(url);req.setMethod('POST');req.setBody(body);HttpResponse res = hreq.send(req);System.debug(Ô>>>Õ+req.getbody()) 8.public Double doAdd(Double arg0,Double arg1){//code         }Integer x=12; Integer y = 19.0 calculatorServices.CalculatorImplPort calculator = new calculatorServices.CalculatorImplPort(); Double sum =. calculator.doAdd(x,y);9.global class FutureClass {     @future     public static void myFutureMethod()     {             // Perform some operations     } }10. public class AsyncExecutionExample implements Queueable {    public void execute(QueueableContext context) {        Account a = new Account(Name='Acme',Phone='(415) 555-1212');        insert a;            }}To enqueue this class as a job, call the following method:ID jobID = System.enqueueJob(new AsyncExecutionExample());11public with sharing class AccountController {    @AuraEnabled(cacheable=true)    public static List<Contact> getContactList() {        return [            SELECT Id, Name, Industry,Phone            FROM Account            WHERE Industry != null            WITH SECURITY_ENFORCED            LIMIT 10        ];    }}12. public class myFirstAccountController{    public Account acc{get;set;}    public myFirstAccountController(){        acc =[SELECT id, Name FROM Account LIMIT 1];    }}Related VF page: This VF page is using the preceding controller to display account details:<apex:page controller="myFirstAccountController">    <apex:pageBlock title="Hi {!$User.LastName}">        this is your first custom controller data        <br/>        Account Name: <apex:outputField value="{!acc.name}"/>    </apex:pageBlock></apex:page>13. public Class customController{public Account acc{get;set;}public customController(){acc = new Account();}public void save(){system.debug(acc);}}The Visual force page code will look like below:<apex:page controller="customController" sidebar="false">    <apex:form>        <apex:pageBlock>            <apex:pageblocksection title="Account Form">                <apex:inputField value="{!acc.Name}" />                <apex:inputField value="{!acc.Industry}"/>                <apex:commandButton value="Save" action="{!save}"/>            </apex:pageblocksection>                    </apex:pageBlock>    </apex:form></apex:page>14. public Class customController{public Account acc{get;set;}public customController(){acc = new Account();        system.debug(acc);}public pageReference save(){system.debug(acc);        insert acc;        return new PageReference('/'+acc.Id);}}15. public pageReference save(){        insert acc;        return new PageReference('/'+acc.Id);}<apex:page controller="customController" sidebar="false">    <apex:form>        <apex:pageBlock>            <apex:pageblocksection title="Account Form">                <apex:inputField value="{!acc.Name}" />                <apex:inputField value="{!acc.Industry}"/>                            </apex:pageblocksection>            <apex:pageblocksection title="contact Form">                <apex:inputField value="{!cont.lastName}" />                <apex:inputField value="{!cont.email}"/>                <apex:inputField value="{!cont.phone}"/>            </apex:pageblocksection>                <apex:commandButton value="Save" action="{!save}"/>        </apex:pageBlock>    </apex:form></apex:page>public Class customController{public Account acc{get;set;}    public Contact cont{get;set;}public customController(){acc = new Account();        		cont= new Contact();}public pageReference save(){        		insert acc;cont.AccountId= acc.id;insert cont;               	return new PageReference('/'+acc.Id);}}16. public Class customControllerRecord{public Account acc{get;set;}public customControllerRecord(){Id recId = ApexPages.currentPage().getParameters().get('Id');acc = [SELECT Name,Industry from Account WHERE ID=:recId];        system.debug(acc);}}<apex:page controller="customControllerRecord" sidebar="false">    <apex:form>        <apex:pageBlock>            <apex:pageblocksection title="Account Detail">                <apex:outputField value="{!acc.Name}" />                <apex:outputField value="{!acc.Industry}"/>                            </apex:pageblocksection></apex:pageBlock>    </apex:form></apex:page>17. public Class customControllerRecord{    public Account acc{get;set;}    public customControllerRecord(){        Id recId = ApexPages.currentPage().getParameters().get('Id');        acc = [SELECT Name,Industry from Account WHERE ID=:recId];        system.debug(acc);    }}18. public class accControllerExtension {    privateÊfinalÊAccount acc;  // The extension constructor initializes the private member   public accControllerExtension(ApexPages.StandardController sc){        this.acc = (Account)sc.getRecord();    }}The Visualforce page :<apex:page standardController="Account" extensions="accControllerExtension">    Hi, <p/>    <apex:form>        <apex:inputField value="{!account.name}"/> <p/>        <apex:commandButton value="Save" action="{!save}"/>    </apex:form></apex:page><apex:page standardController="Account" extensions="ext1,ext2"></apex:page>19.<apex:page standardController="Account" renderAs="pdf" recordSetVar="acc">-----</apex:page>For excel generate we will add contentType tag in <Apex:page>:<apex:page standardController="Account"  contentType="application/vnd.ms-excel#filename.xls"   language="en-US" cache="True"></apex:page>20. Public class accountWrapper{public Account acc;public Boolean isActive;public Integer serialNo;public Student__c stud;public accountWrapper(Account acc, Boolean actv){this.acc = acc;this.isActive = actv;}}We can see the use of Wrapper in the following code:accountWrapper acw = new accountWrapper();orAccount acc = new Account(name = ÔsaifÕ);insert acc;accountWrapper acw = new accountWrapper(acc,true);