1.let c = 5;  let sum = x + y;  let books= ["BPB", "Shine", "TMH"];  // It store object data (objects are   // represented in the below way mainly)  let Student = {      firstName: "John",      lastName: "Doe",       age: 35,       mark: "blueEYE"  } 2.// Function definition  function addNumber() {      // Declare a variable      let a = 4;     let b=5;     return a+b; }  // Function call  console.log(addNumber());3.<?xml version="1.0" encoding="UTF-8"?> <LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">     <apiVersion>45.0</apiVersion>     <isExposed>false</isExposed> <targets>     <target>lightning__RecordPage</target>     <target>lightning__AppPage</target>     <target>lightning__HomePage</target>   </targets> </LightningComponentBundle>4. @api book = 'cloud computing' @track fullName = { firstName : '', lastName : ''}; this.fullName.firstName = 'John'; @wire import { LightningElement, api, wire } from "lwc"; import { getRecord } from "lightning/uiRecordApi"; import ACCOUNT_NAME_FIELD from "@salesforce/schema/Account.Name";  5.export default class Record extends LightningElement {   @api recordId;    @wire(getRecord, { recordId: "$recordId", fields: [ACCOUNT_NAME_FIELD] })   record; } 6. The JS file will look like this import { LightningElement, api} from "lwc";  export default class Record extends LightningElement {   @api bookName; } And HTML file will be as follows <template>   <c-branch book-name-name="Salesforce book"></c-branch> </template>7.<!-- firstComponent.html -->  <template> Welcome to {greeting}! </template>  // firstComponent.js  import { LightningElement } from "lwc";  export default class FirstComponent extends LightningElement {  	greeting = "coding";  } 8. <template>         <p>Hi, {name}!</p>         <lightning-input label="Name" value={name} onchange={handleNameChange}>.              </lightning-input>  </template>  import { LightningElement } from "lwc";  export default class SecondComp extends LightningElement {  name = "World";  handleNameChange (event) {        this.name = event.target.value;         }  }9.export default class CountdownTimer extends LightningElement {     timeInSec = 5;     connectedCallback() {         this.countDownTimer = setInterval(() => {             if (this.timeInSec > 0) {                 this.timeInSec--;             }         }, 1000);     }     renderedCallback() {         if (this.timeInSec === 0) {             clearInterval(this.countDownTimer);         }     }     disconnectedCallback() {         clearInterval(this.countDownTimer);     } }10. <lightning-input type="text" label="Enter text" onchange={handleInputChange}> </lightning-input>  <lightning-button variant="brand" label="Download" title="Download action with brand variant" icon-name="utility:download" class="slds-m-left_x-small"></lightning-button>  11.<lightning-formatted-text value="Email info@salesforce.com" linkify>  </lightning-formatted-text>  <lightning-layout>     <lightning-layout-item padding="around-small">         <div class="header-column">         <p class="field-title" title="Field 1">Field 1</p>             <p>Name</p>         </div>     </lightning-layout-item>     <lightning-layout-item padding="around-small">         <div class="header-column">             <p class="field-title" title="Field2 (3)">Field 2 (3)             <lightning-button-icon icon-name="utility:down" variant="border-filled" size="small" alternative-text="More Actions"></lightning-button-icon>             </p>             <p>Eligibility</p>         </div>     </lightning-layout-item> </lightning-layout>  12. <template>     <lightning-card title="Saif CoderinMe" icon-name="custom:custom14">         <div class="slds-m-around_medium">             <p>Hello, {greeting} {greeting1}!</p>             <lightning-input label="First Name" value={greeting} placeholder="Please enter your first name" onchange={changeHandler}></lightning-input>             <lightning-input label="Last Name" value={greeting1} onchange={changeHandler1} placeholder="Please enter your last name"></lightning-input>         </div>     </lightning-card> </template> import { LightningElement, track} from 'lwc';  export default class HelloWorld extends LightningElement {     @track greeting = '';     @track greeting1 = '';     changeHandler(event) {         this.greeting = event.target.value;     }     changeHandler1(event) {         this.greeting1 = event.target.value;     } }13. <template>     <lightning-card title="WireGetRecordDynamicContact" icon-name="standard:contact">         <template if:true={contact.data}>             <div class="slds-var-m-around_medium">                 <p>{name}</p>                 <p>{title}</p>                 <p>                     <lightning-formatted-phone value={phone}></lightning-formatted-phone>                 </p>                 <p>                     <lightning-formatted-email value={email}></lightning-formatted-email>                 </p>             </div>         </template>         <template if:true={contact.error}>             <c-error-panel errors={contact.error}></c-error-panel>         </template>         <c-view-source source="lwc/wireGetRecordDynamicContact" slot="footer">             Create an ad-hoc UI for a specific record. This recipe uses a dynamic schema definition (fields are             specified as string).         </c-view-source>     </lightning-card> </template> import { LightningElement, api, wire } from 'lwc'; import { getRecord } from 'lightning/uiRecordApi'; const fields = ['Contact.Name', 'Contact.Title', 'Contact.Phone', 'Contact.Email'];  export default class WireGetRecordDynamicContact extends LightningElement {     @api recordId;     @wire(getRecord, { recordId: '$recordId', fields })     contact;     get name() {         return this.contact.data.fields.Name.value;     }     get title() {         return this.contact.data.fields.Title.value;     }     get phone() {         return this.contact.data.fields.Phone.value;     }     get email() {         return this.contact.data.fields.Email.value;     } }14. leadDataFromApex.js import { LightningElement } from 'lwc'; import getLeadList from '@salesforce/apex/LeadController.getLeadList;  export default class LeadDataFromApex extends LightningElement {     leadList;     error;      async handleShowLeads() {         try {             this.leadList = await getLeadList();             this.error = undefined;         } catch (error) {             this.leadList = undefined;             this.error = error;         }     } }  Apex Class LeadController.cls will look like this: public with sharing class LeadController {     @AuraEnabled(cacheable=true)     public static List<Lead> getLeadList() {         return [             SELECT Id, FirstName,Email,Company             FROM Lead             WHERE Email != NULL             WITH SECURITY_ENFORCED             LIMIT 5         ];     } } HTML file  leadDataFromApex.html  will be written as following:   <template> <lightning-card title="LeadDataFromApex" icon-name="custom:custom66">     <div class="slds-m-around_medium">       <p class="slds-m-bottom_small">         <lightning-button label="Show Contacts" onclick="{handleShowLeads}"></lightning-button>       </p>       <template lwc:if="{leadList}">         <template for:each="{leadList}" for:item="lead">           <p key="{lead.Id}">{lead.firstName}</p>         </template>       </template>       <template lwc:elseif="{error}">        {error}       </template>     </div>   </lightning-card> </template>  15.<!-- todoComp.html --> <template>     <div class="listing">         <c-todo-item item-name="Milk"></c-todo-item>         <c-todo-item item-name="Bread"></c-todo-item>     </div> </template>  As you can see the child component is “todoItem”. We are passing values as milk and bread in the itemName variable:  // todoItem.js import { LightningElement, api } from "lwc"; export default class TodoItem extends LightningElement {   @api itemName = "New Item"; }  This is the child component JS, where itemName is a public variable that will get the data from the parent component: <!-- todoItem.html --> <template>   <div class="view">     <label>{itemName}</label>   </div> </template>  16. <!--pageLwc.html --> <lightning-input     onchange={handleChangeMethod}     type="number"     name="input1"     label="Enter a number"> </lightning-input>  // pageLwc.js import { LightningElement } from "lwc"; export default class PageLwc extends LightningElement {   handleChangeMethod() {     let num = event.target.value;     // Creates the event with the data.     const sendEvnt = new CustomEvent("sendnum", {     detail: num     });      // Dispatches the event.     this.dispatchEvent(sendEvnt);   } }  17. <template>   <lightning-card title="Getting num From Child Comp">       <lightning-progress-bar         value={index}       ></lightning-progress-bar>       <c-page-lwc         onsendnum={handleEvent}       ></c-page-lwc>   </lightning-card> </template> import { LightningElement } from "lwc";  export default class ParentLwc extends LightningElement {   index = 0;   handleEvent(event) {     this.index = event.detail;   } }  18. Utility.js: Let’s check the common code import timezone from "@salesforce/i18n/timeZone"; export function makeUserLink(sid,pos) {     return 'https://in.bpbonline.com/products/cloud-computing-using-salesforce?_pos='+pos+'&_sid='+sid+'&tz='+timezone; }  Comp1.js: let’s implement the component code import { makeUserLink } from 'c/iQ_Utility'; export default class comp1 extends LightningElement {     url;     connectedCallback() {      this.url = makeUserLink('12teg',1);     } } Comp2.js: let’s implement the component code import { makeUserLink } from 'c/iQ_Utility';  export default class comp1 extends LightningElement {      valuCode;      connectedCallback() {  this.valuCode = 'https://www.amazon.in?redirectul='+ makeUserLink('12teg',1);      }  }  19.  import { LightningElement } from 'lwc'; import BPB_Resource from '@salesforce/resourceUrl/myResource'; export default class ResourceExample extends LightningElement {     bpbLogo = BPB_Resource + '/img/bpb.jpg';    } <template>     <lightning-card title="Resoucre example" icon-name="custom:custom19">         <div class="slds-m-around_medium">             <img src={bpbLogo}>         </div>     </lightning-card> </template>  